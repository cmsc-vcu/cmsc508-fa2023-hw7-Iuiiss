---
title: Homework 7 - Creating a resume database
author: Luis Leis 
date: last-modified
format:
    html:
        theme: cosmo
        toc: true
        embed-resources: true
        code-copy: true
---

(include a brief description of what is in this document)

(Please clean up any comments that I included.  This is a scaffold document.)

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc508-fa2023-hw7-Iuiiss/tree/main>

```{python}
#| eval: true
#| echo: false
import os
import sys
import pandas as pd
from tabulate import tabulate
from dotenv import load_dotenv
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError
from IPython.display import display, Markdown
```
```{python}
#| eval: true
#| echo: false

# modify config_map to reflect credentials needed by this program
config_map = {
    'user':'CMSC508_USER',
    'password':'CMSC508_PASSWORD',
    'host':'CMSC508_HOST',
    'database':'HW7_DB_NAME'
}
# load and store credentials
load_dotenv()
config = {}
for key in config_map.keys():
    config[key] = os.getenv(config_map[key])
flag = False
for param in config.keys():
    if config[param] is None:
        flag = True
        print(f"Missing {config_map[param]} in .env file")
#if flag:
#    sys.exit(1)
```
```{python}
#| eval: true
#| echo: false

# build a sqlalchemy engine string
engine_uri = f"mysql+pymysql://{config['user']}:{config['password']}@{config['host']}/{config['database']}"

# create a database connection.  THIS IS THE ACTUAL CONNECTION!
try:
    cnx = create_engine(engine_uri)
except ArgumentError as e:
    print(f"create_engine: Argument Error: {e}")
    #sys.exit(1)
except NoSuchModuleError as e:
    print(f"create_engine: No Such Module Error: {e}")
    #sys.exit(1)
except Exception as e:
    print(f"create_engine: An error occurred: {e}")
    #sys.exit(1)
```
```{python}
#| echo: false
#| eval: true

# Do a quick test of the connection and trap the errors better!
try:
    databases = pd.read_sql("show databases",cnx)
except ImportError as e:
    print(f"Error: {e}")
except OperationalError as e:
    print(f"Database/SQL Error:\n{str(e)}\n")
except ProgrammingError as e:
    print(f"Programming Error:\n{str(e)}\n")
except Exception as e:
    print(f"An error occurred:\n{str(e)}\n")

```

## Overview and description

This projects teaches us how to actually create and populate databases, and practice using the queries to return the specified result we are looking for

## Crows-foot diagram

Here we can see a visual representation of the relationships between the tables

```{mermaid}
%%| echo: false
erDiagram
    PEOPLE ||--o{ SKILLS : can_have
    PEOPLE }|--|{ ROLES: can_have

    PEOPLE{
        int id
        string first_name
        string last_name
        string email
        string linkedin_url
        string headshot_url
        string discord_handle
        string brief_bio
        date date_joined
    }
    PEOPLEROLES{
        int id
        int people_id
        int role_id
        date date_assigned

        
    }
    PEOPLESKILLS{
        int id
        int skills_id
        int people_id
        date date_acquired
    }
    ROLES{
        int roles_id
        string roles_name
        int sort_priority
    }
    SKILLS{
        int skills_id
        string description
        string tag
        string url
        int time_commitment
    }
```

## Examples of data in the database

For the people, skills, and roles tables, provide a description of each table and it's contents. Then provide a listing of the entire table.

### People table

The *people* table contains elements that describe ... 

Below is a list of data in the *people* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from people;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Skills table

The *skills* table contains elements that describe ... 

Below is a list of data in the *skills* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from skills;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### Roles table

The *roles* table contains elements that describe ... 

Below is a list of data in the *roles* table.

```{python}
#| echo: false
#| eval: true
sql = f"""
select * from roles;
"""
## Add code to list roles table here
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


## Sample queries

Let's explore the database!

# List skill names, tags, and descriptions ordered by name



(and here is a sample result from the query)

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT skills_name, skills_tag, skills_description
FROM skills
ORDER BY skills_name;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```


### List people names and email addresses ordered by last_name
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT people_first_name, people_last_name, people_email
FROM people
ORDER BY people_last_name;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List skill names of Person 1
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT s.skills_name
FROM people p
JOIN peopleskills ps ON p.people_id = ps.people_id
JOIN skills s ON ps.skills_id = s.skills_id
WHERE p.people_id = 1;
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names with Skill 6
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT p.people_first_name, p.people_last_name
FROM people p
JOIN peopleskills ps ON p.people_id = ps.people_id
JOIN skills s ON ps.skills_id = s.skills_id
WHERE s.skills_tag = 'Skill 6';
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people with a DEVELOPER role
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT p.people_first_name, p.people_last_name
FROM people p
JOIN peopleroles pr ON p.people_id = pr.people_id
JOIN roles r ON pr.role_id = r.roles_id
WHERE r.roles_name = 'Developer';

"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and email addresses of people without skills

```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT p.people_first_name, p.people_last_name, p.people_email
FROM people p
WHERE p.people_id NOT IN (SELECT DISTINCT people_id FROM peopleskills);

"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List names and tags of unused skills
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT s.skills_name, s.skills_tag
FROM skills s
WHERE s.skills_id NOT IN (SELECT DISTINCT skills_id FROM peopleskills);

"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List people names and skill names with the BOSS role
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT p.people_first_name, p.people_last_name, s.skills_name
FROM people p
JOIN peopleroles pr ON p.people_id = pr.people_id
JOIN roles r ON pr.role_id = r.roles_id
JOIN peopleskills ps ON p.people_id = ps.people_id
JOIN skills s ON ps.skills_id = s.skills_id
WHERE r.roles_name = 'Boss';

"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

### List ids and names of unused roles
```{python}
#| echo: false
#| eval: true
sql = f"""
SELECT r.roles_id, r.roles_name
FROM roles r
WHERE r.roles_id NOT IN (SELECT DISTINCT role_id FROM peopleroles);
"""
try:
    df = pd.read_sql(sql,cnx)
    df
except Exception as e:
    message = str(e)
    print(f"An error occurred:\n\n{message}\n\nIgnoring and moving on.")
    df = pd.DataFrame()
df
```

## Reflection

(Write a paragraph expressing your thoughts, feelings, and insights about your experience with this assignment.  Pause and breath before writing - I'm trying to encourage critical thinking and self-awareness while allowing you to explore the connections between theory and practice. And yes, delete this paragraph.)

While working on this assignment, I found myself having the same feeling as I did when I first started coding. I felt lost, and would quickly get stuck on little mistakes that I couldn't seem to figure out. But after a bit of work I started finding patterns and certain things that repeated from section to section. It was then we I started getting the hang of it and realizing that this is just pretty much working in excel. The tables, the information, making sure the columns and the info align regarding the data types, the connections, etc. I found myself enjoying working on this. Although I did feel like it was just repetitive work and tedious in a sense, it's a very rewarding feeling when everything works nicely.

